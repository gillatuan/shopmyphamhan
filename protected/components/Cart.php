<?phpclass Cart extends CApplicationComponent {        //Add a product order to our COOKIE/JSON based cart.    static public function AddOrShowCart($category = '', $alias, $quantity = 1, $valueBefore = 0, $totalValueBefore = 0, $type = '') {        //Checks to see if cart already exists.        if (Yii::app()->request->cookies->contains('Cart')) {            //JSON content is turned back into array.            $cart = self::getCookie('Cart');        } else {            $cart = array();        }        //        self::removeCart(); die;        $criteria = Products::model()->createCriteria($category, $alias);        $product = Cache::usingCache('Products', $criteria, $alias, false);        $totalValueAfterUpdate = $value = $valueAfterUpdate = 0;        if (count($cart)) {            foreach ($cart as $c) {                if ($c->alias == $alias) {                    $aliasCart = $alias;                    switch ($type) {                        case 'updateCart':                            $quantityAfter = $quantity;                            break;                        case 'addCart':                            $quantityAfter = $c->quantity + $quantity;                            break;                        default;                            $quantityAfter = $c->quantity + $quantity;                            break;                    }                    $value = $product->price * $quantityAfter;                    $valueDiscount = ($product->price * $product->discount / 100) * $quantityAfter;                    $valueAfterDiscount = $value - $valueDiscount;                    $formatValueAfterDiscount = Helper::formatNumber($valueAfterDiscount);                    $totalValueAfterDiscount = $totalValueBefore - $valueBefore + $valueAfterDiscount;                    $c->quantity = $quantityAfter;                    $c->value = $value;                    $c->valueDiscount = $valueDiscount;                    $c->valueAfterDiscount = $valueAfterDiscount;                    $c->totalValueAfterDiscount = $totalValueAfterDiscount;                    $c->formatValueDiscount = Helper::formatNumber($valueDiscount);                    $c->formatValueAfterDiscount = $formatValueAfterDiscount;                    $c->formatTotalValueAfterDiscount = Helper::formatNumber($totalValueAfterDiscount);                }                $valueAfterUpdate += $c->valueAfterDiscount;            }            $totalValueAfterUpdate = $totalValueBefore - $valueBefore + $valueAfterUpdate;            $totalValueBefore = $totalValueBefore - $valueBefore + $value;        }        if (!isset($aliasCart) && $type == 'addCart') {            $value = $product->price * $quantity;            $valueDiscount = ($product->price * $product->discount / 100) * $quantity;            $valueAfterDiscount = $value - $valueDiscount;            $totalValueAfterDiscount = $totalValueBefore - $valueBefore + $valueAfterDiscount;            $cart[] = array(                'category'                      => $category,                'name'                          => $product->name,                'alias'                         => $alias,                'price'                         => $product->price,                'quantity'                      => $quantity,                'value'                         => $value,                'valueDiscount'                 => $valueDiscount,                'valueAfterDiscount'            => $valueAfterDiscount,                'totalValueAfterDiscount'       => $totalValueAfterDiscount,                'formatValueDiscount'           => Helper::formatNumber($valueDiscount),                'formatValueAfterDiscount'      => Helper::formatNumber($valueAfterDiscount),                'formatTotalValueAfterDiscount' => Helper::formatNumber($totalValueAfterDiscount),                'amountProductsInCart'          => 0            );            $amountProducts = count($cart);            if ($amountProducts > 1) {                $cart = Helper::objectToArray($cart);            }            for ($i=0; $i < $amountProducts; $i++) {                $cart[$i]['amountProductsInCart'] = $amountProducts;            }            $totalValueAfterUpdate = $totalValueBefore - $valueBefore + Transport_Charge + $valueAfterDiscount;        }        //Encode cart array back into JSON.        $createCart = json_encode($cart);        if ($quantity == 0) {            $cart = self::RemoveProduct($alias);            $totalValueAfterUpdate = $totalValueBefore - $valueBefore;            $createCart = json_encode($cart);        }        self::setCookie('Cart', $createCart);        self::setCookie('amountProducts', count($cart));        self::setCookie('totalValueAfterUpdate', $totalValueAfterUpdate);        self::setCookie('formatValueAfterDiscount', Helper::formatNumber($valueAfterDiscount));        self::setCookie('formatTotalValueAfterUpdate', Helper::formatNumber($totalValueAfterUpdate));        self::setCookie('totalValueBefore', Helper::formatNumber($totalValueBefore));        return $cart;    }    public static function setCookie($name, $value, $time = 3600, $disableClientCookies = false) {        $cookie = new CHttpCookie($name, $value);        $cookie->expire = time() + $time;        $cookie->httpOnly = $disableClientCookies;        Yii::app()->request->cookies[$name] = $cookie;    }    public static function hasCookie($name) {        return !empty(Yii::app()->request->cookies[$name]->value);    }    public static function getCookie($name) {        return self::hasCookie($name) ? json_decode(Yii::app()->request->cookies[$name]->value) : array();    }    public static function removeCookie($name='') {        if (empty($name)) {            Yii::app()->request->cookies->clear();        } else {            unset(Yii::app()->request->cookies[$name]);        }    }    //Remove product order from Cart.    public static function RemoveProduct($alias) {        $products = self::getCookie('Cart');        //JSON content is turned back into array.        $newCart = array();        foreach ($products as $product) {            //Check to see if $products key ($order) matches the $products key we wish to remove.            if ($product->alias != $alias) {                $product->amountProductsInCart -= 1;                //If result is false add product order to new array.                $newCart[] = $product;            }        }        //Encode new Cart array into JSON.        if (count($newCart)) {            $createCart = json_encode($newCart);            self::setCookie('Cart', $createCart);            self::setCookie('amountProducts', count($newCart));        } else {            self::removeCookie();        }        return $newCart;    }}