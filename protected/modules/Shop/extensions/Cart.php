<?phpclass Cart {    //Add a product order to our COOKIE/JSON based cart.    static public function AddOrShowCart($category = '', $alias, $quantity = 1, $valueBefore = 0, $totalValueBefore = 0, $type = '') {        //Checks to see if cart already exists.        if (isset($_COOKIE['Cart'])) {            //JSON content is turned back into array.            $cart = json_decode($_COOKIE['Cart']);        } else {            $cart = array();        }        //        self::removeCart(); die;        $criteria = Products::model()->createCriteria($category, $alias);        $product = Cache::model()->usingCache('Products', $criteria, $alias, false);        $name = $product->name;        $totalValueAfterUpdate = $value = $valueAfterUpdate = 0;        if (count($cart)) {            foreach ($cart as $k => $c) {                if ($c->alias == $alias) {                    $aliasCart = $c->alias;                    switch ($type) {                        case 'updateCart':                            $quantityAfter = $quantity;                            break;                        case 'addCart':                            $quantityAfter = $c->quantity + $quantity;                            break;                        default;                            $quantityAfter = $c->quantity + $quantity;                            break;                    }                    $value = $product->price * $quantityAfter;                    $valueDiscount = ($product->price * $product->discount / 100) * $quantityAfter;                    $valueAfterDiscount = $value - $valueDiscount;                    $totalValueAfterDiscount = $totalValueBefore - $valueBefore + $valueAfterDiscount;                    $c->quantity = $quantityAfter;                    $c->value = $value;                    $c->valueDiscount = $valueDiscount;                    $c->valueAfterDiscount = $valueAfterDiscount;                    $c->totalValueAfterDiscount = $totalValueAfterDiscount;                    $c->formatValueDiscount = Helper::formatNumber($valueDiscount);                    $c->formatValueAfterDiscount = Helper::formatNumber($valueAfterDiscount);                    $c->formatTotalValueAfterDiscount = Helper::formatNumber($totalValueAfterDiscount);                }                $valueAfterUpdate += $c->valueAfterDiscount;            }            $totalValueAfterUpdate = $totalValueBefore - $valueBefore + $valueAfterUpdate;            $totalValueBefore = $totalValueBefore - $valueBefore + $value;        }        if (!isset($aliasCart) && $type == 'addCart') {            $value = $product->price * $quantity;            $valueDiscount = ($product->price * $product->discount / 100) * $quantity;            $valueAfterDiscount = $value - $valueDiscount;            $totalValueAfterDiscount = $totalValueBefore - $valueBefore + $valueAfterDiscount;            $cart[] = array(                'category'                      => $category,                'name'                          => $name,                'alias'                         => $alias,                'price'                         => $product->price,                'quantity'                      => $quantity,                'value'                         => $value,                'valueDiscount'                 => $valueDiscount,                'valueAfterDiscount'            => $valueAfterDiscount,                'totalValueAfterDiscount'       => $totalValueAfterDiscount,                'formatValueDiscount'           => Helper::formatNumber($valueDiscount),                'formatValueAfterDiscount'      => Helper::formatNumber($valueAfterDiscount),                'formatTotalValueAfterDiscount' => Helper::formatNumber($totalValueAfterDiscount),                'amountProductsInCart'          => 0            );            $amountProducts = count($cart);            if ($amountProducts > 1) {                $cart = Helper::objectToArray($cart);            }            for ($i = 0; $i < $amountProducts; $i++) {                $cart[$i]['amountProductsInCart'] = $amountProducts;            }            $totalValueAfterUpdate = $totalValueBefore - $valueBefore + Transport_Charge + $valueAfterDiscount;        }        //Encode cart array back into JSON.        $createcart = json_encode($cart);        if ($quantity == 0) {            $cart = self::RemoveProduct($alias);            $totalValueAfterUpdate = $totalValueBefore - $valueBefore;            $createcart = json_encode($cart);        }        setcookie('Cart', $createcart, time() + 3600);        setcookie('amountProducts', count($cart), time() + 3600);        setcookie('totalValueAfterUpdate', $totalValueAfterUpdate, time() + 3600);        setcookie('formatTotalValueAfterUpdate', Helper::formatNumber($totalValueAfterUpdate), time() + 3600);        setcookie('totalValueBefore', $totalValueBefore, time() + 3600);        return $cart;    }    //Displays our Cart to the page.    public function DisplayCart() {        if (isset($_COOKIE['Cart'])) {            $cart = $_COOKIE['Cart'];            //JSON content is turned back into array.            $products = json_decode($cart);            //Loop through Cart array to display relevant Cart info.            foreach ($products as $order => $product) {                echo '<p>';                echo $order;                echo $product[0];                echo $product[1];                echo '</p>';            }        } else {            echo 'No Products In Cart';        }    }    //Remove product order from Cart.    static public function RemoveProduct($alias) {        $cart = $_COOKIE['Cart'];        //JSON content is turned back into array.        $products = json_decode($cart);        $newCart = array();        foreach ($products as $product) {            //Check to see if $products key ($order) matches the $products key we wish to remove.            if ($product->alias != $alias) {                $product->amountProductsInCart -= 1;                //If result is false add product order to new array.                $newCart[] = $product;            }        }        //Encode new Cart array into JSON.        $createCart = json_encode($newCart);        setcookie('Cart', $createCart, time() + 3600);        return $newCart;    }    static public function removeCart() {        setcookie('Cart', '', time() - 3600);        setcookie('amountProducts', '', time() - 3600);        setcookie('totalValueAfterUpdate', '', time() - 3600);        setcookie('formatTotalValueAfterUpdate', '', time() - 3600);        setcookie('totalValueBefore', '', time() - 3600);    }    static public function addCookie($cookieName = 'cookieValue', $param) {        if (is_array($param)) {            $newParam = json_encode($param);            setcookie($cookieName, $newParam, time() + 3600);        } else {            setcookie($cookieName, $param, time() + 3600);        }    }    static public function displayCookie($cookieName) {        if (isset($_COOKIE[$cookieName])) {            $decodeCart = json_decode($_COOKIE[$cookieName]);            return Helper::objectToArray($decodeCart);        } else {            return Helper::t('NO_RESULTS_KEY');            // throw new CHttpException(400, Helper::t('Error_Link'));        }    }}